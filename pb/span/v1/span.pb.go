// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: span/v1/span.proto

package span

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Span struct {
	TraceID              Span_TraceID      `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id"`
	SpanID               uint64            `protobuf:"varint,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	ParentID             uint64            `protobuf:"varint,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Flags                uint32            `protobuf:"varint,4,opt,name=flags,proto3" json:"flags,omitempty"`
	Baggage              map[string]string `protobuf:"bytes,10,rep,name=baggage,proto3" json:"baggage,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Span) Reset()         { *m = Span{} }
func (m *Span) String() string { return proto.CompactTextString(m) }
func (*Span) ProtoMessage()    {}
func (*Span) Descriptor() ([]byte, []int) {
	return fileDescriptor_c727980cc4febcb7, []int{0}
}
func (m *Span) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Span) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Span.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Span) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Span.Merge(m, src)
}
func (m *Span) XXX_Size() int {
	return m.Size()
}
func (m *Span) XXX_DiscardUnknown() {
	xxx_messageInfo_Span.DiscardUnknown(m)
}

var xxx_messageInfo_Span proto.InternalMessageInfo

func (*Span) XXX_MessageName() string {
	return "span.v1.Span"
}

type Span_TraceID struct {
	Low                  uint64   `protobuf:"varint,1,opt,name=Low,proto3" json:"Low,omitempty"`
	High                 uint64   `protobuf:"varint,2,opt,name=High,proto3" json:"High,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Span_TraceID) Reset()         { *m = Span_TraceID{} }
func (m *Span_TraceID) String() string { return proto.CompactTextString(m) }
func (*Span_TraceID) ProtoMessage()    {}
func (*Span_TraceID) Descriptor() ([]byte, []int) {
	return fileDescriptor_c727980cc4febcb7, []int{0, 1}
}
func (m *Span_TraceID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Span_TraceID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Span_TraceID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Span_TraceID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Span_TraceID.Merge(m, src)
}
func (m *Span_TraceID) XXX_Size() int {
	return m.Size()
}
func (m *Span_TraceID) XXX_DiscardUnknown() {
	xxx_messageInfo_Span_TraceID.DiscardUnknown(m)
}

var xxx_messageInfo_Span_TraceID proto.InternalMessageInfo

func (*Span_TraceID) XXX_MessageName() string {
	return "span.v1.Span.TraceID"
}
func init() {
	proto.RegisterType((*Span)(nil), "span.v1.Span")
	golang_proto.RegisterType((*Span)(nil), "span.v1.Span")
	proto.RegisterMapType((map[string]string)(nil), "span.v1.Span.BaggageEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "span.v1.Span.BaggageEntry")
	proto.RegisterType((*Span_TraceID)(nil), "span.v1.Span.TraceID")
	golang_proto.RegisterType((*Span_TraceID)(nil), "span.v1.Span.TraceID")
}

func init() { proto.RegisterFile("span/v1/span.proto", fileDescriptor_c727980cc4febcb7) }
func init() { golang_proto.RegisterFile("span/v1/span.proto", fileDescriptor_c727980cc4febcb7) }

var fileDescriptor_c727980cc4febcb7 = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x51, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0x65, 0xa1, 0x52, 0x18, 0x30, 0x9a, 0x8d, 0x26, 0xa4, 0x87, 0xb6, 0xc1, 0x4b, 0x3d, 0xd8,
	0x06, 0xd4, 0xc4, 0xe0, 0xc9, 0x06, 0x13, 0x9b, 0x78, 0x30, 0xab, 0x27, 0x2f, 0x66, 0x4b, 0xcb,
	0x42, 0xc4, 0xb6, 0x29, 0x05, 0xc3, 0x1f, 0xf8, 0x19, 0x7e, 0x8a, 0x47, 0x8e, 0x7e, 0x41, 0x63,
	0xca, 0x8f, 0x98, 0x9d, 0x42, 0xa2, 0x97, 0xee, 0x7b, 0xf3, 0xde, 0x9b, 0xce, 0x64, 0x80, 0xce,
	0x13, 0x1e, 0x39, 0xcb, 0x9e, 0x23, 0x5f, 0x3b, 0x49, 0xe3, 0x2c, 0xa6, 0x2a, 0xe2, 0x65, 0x4f,
	0x3b, 0x13, 0xd3, 0x6c, 0xb2, 0xf0, 0xed, 0x51, 0xfc, 0xe6, 0x88, 0x58, 0xc4, 0x0e, 0xea, 0xfe,
	0x62, 0x8c, 0x0c, 0x09, 0xa2, 0x32, 0xd7, 0xcd, 0xab, 0xa0, 0x3c, 0x26, 0x3c, 0xa2, 0x37, 0xd0,
	0xc8, 0x52, 0x3e, 0x0a, 0x5f, 0xa6, 0x41, 0x87, 0x98, 0xc4, 0x6a, 0xf5, 0x8f, 0xed, 0x6d, 0x4f,
	0x5b, 0x1a, 0xec, 0x27, 0xa9, 0x7a, 0x43, 0xf7, 0x60, 0x9d, 0x1b, 0x95, 0x22, 0x37, 0xd4, 0x6d,
	0x81, 0xa9, 0x98, 0xf3, 0x02, 0x7a, 0x02, 0x38, 0x85, 0xec, 0x50, 0x35, 0x89, 0xa5, 0xb8, 0x50,
	0xe4, 0x46, 0x5d, 0x86, 0xbd, 0x21, 0xab, 0x4b, 0xc9, 0x0b, 0xe8, 0x29, 0x34, 0x13, 0x9e, 0x86,
	0x51, 0x26, 0x6d, 0x35, 0xb4, 0xb5, 0x8b, 0xdc, 0x68, 0x3c, 0x60, 0xd1, 0x1b, 0xb2, 0x46, 0x29,
	0x7b, 0x01, 0x3d, 0x82, 0xbd, 0xf1, 0x8c, 0x8b, 0x79, 0x47, 0x31, 0x89, 0xb5, 0xcf, 0x4a, 0x42,
	0x2f, 0x40, 0xf5, 0xb9, 0x10, 0x5c, 0x84, 0x1d, 0x30, 0x6b, 0x56, 0xab, 0xaf, 0xfd, 0x9f, 0xd3,
	0x2d, 0xc5, 0xdb, 0x28, 0x4b, 0x57, 0x6c, 0x67, 0xd5, 0x06, 0xd0, 0xfe, 0x2b, 0xd0, 0x43, 0xa8,
	0xbd, 0x86, 0x2b, 0xdc, 0xb4, 0xc9, 0x24, 0x94, 0x7f, 0x5b, 0xf2, 0xd9, 0x22, 0xc4, 0xd9, 0x9b,
	0xac, 0x24, 0x83, 0xea, 0x15, 0xd1, 0x2e, 0x61, 0xb7, 0xab, 0x8c, 0xdd, 0xc7, 0xef, 0x18, 0x53,
	0x98, 0x84, 0x94, 0x82, 0x72, 0x37, 0x15, 0x93, 0x72, 0x63, 0x86, 0x78, 0xa0, 0x7c, 0x7c, 0x1a,
	0x95, 0xf2, 0xeb, 0x76, 0xd7, 0x85, 0x4e, 0xbe, 0x0b, 0x9d, 0xfc, 0x14, 0x3a, 0xf9, 0xda, 0xe8,
	0x64, 0xbd, 0xd1, 0xc9, 0x73, 0x7b, 0x7b, 0xc2, 0x6b, 0xf9, 0xfa, 0x75, 0xbc, 0xc5, 0xf9, 0x6f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xcb, 0xe3, 0xbd, 0xea, 0xd9, 0x01, 0x00, 0x00,
}

func (m *Span) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Span) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Span) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Baggage) > 0 {
		for k := range m.Baggage {
			v := m.Baggage[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintSpan(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSpan(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSpan(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Flags != 0 {
		i = encodeVarintSpan(dAtA, i, uint64(m.Flags))
		i--
		dAtA[i] = 0x20
	}
	if m.ParentID != 0 {
		i = encodeVarintSpan(dAtA, i, uint64(m.ParentID))
		i--
		dAtA[i] = 0x18
	}
	if m.SpanID != 0 {
		i = encodeVarintSpan(dAtA, i, uint64(m.SpanID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.TraceID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSpan(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Span_TraceID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Span_TraceID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Span_TraceID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.High != 0 {
		i = encodeVarintSpan(dAtA, i, uint64(m.High))
		i--
		dAtA[i] = 0x10
	}
	if m.Low != 0 {
		i = encodeVarintSpan(dAtA, i, uint64(m.Low))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSpan(dAtA []byte, offset int, v uint64) int {
	offset -= sovSpan(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Span) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TraceID.Size()
	n += 1 + l + sovSpan(uint64(l))
	if m.SpanID != 0 {
		n += 1 + sovSpan(uint64(m.SpanID))
	}
	if m.ParentID != 0 {
		n += 1 + sovSpan(uint64(m.ParentID))
	}
	if m.Flags != 0 {
		n += 1 + sovSpan(uint64(m.Flags))
	}
	if len(m.Baggage) > 0 {
		for k, v := range m.Baggage {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSpan(uint64(len(k))) + 1 + len(v) + sovSpan(uint64(len(v)))
			n += mapEntrySize + 1 + sovSpan(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Span_TraceID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Low != 0 {
		n += 1 + sovSpan(uint64(m.Low))
	}
	if m.High != 0 {
		n += 1 + sovSpan(uint64(m.High))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSpan(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSpan(x uint64) (n int) {
	return sovSpan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Span) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Span: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Span: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TraceID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanID", wireType)
			}
			m.SpanID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpanID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentID", wireType)
			}
			m.ParentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Baggage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Baggage == nil {
				m.Baggage = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSpan
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSpan
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthSpan
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthSpan
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSpan(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSpan
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Baggage[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Span_TraceID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Low", wireType)
			}
			m.Low = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Low |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field High", wireType)
			}
			m.High = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.High |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpan
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSpan
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSpan
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSpan
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSpan        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpan          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSpan = fmt.Errorf("proto: unexpected end of group")
)
