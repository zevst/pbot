// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: span/v1/span.proto

package span

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// Validate checks the field values on Span with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Span) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetTraceId()

		if v, ok := interface{}(&tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return SpanValidationError{
					field:  "TraceId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	// no validation rules for SpanId

	// no validation rules for ParentId

	// no validation rules for Flags

	// no validation rules for Baggage

	if m.GetPayload() == nil {
		return SpanValidationError{
			field:  "Payload",
			reason: "value is required",
		}
	}

	if a := m.GetPayload(); a != nil {

	}

	return nil
}

// SpanValidationError is the validation error returned by Span.Validate if the
// designated constraints aren't met.
type SpanValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpanValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpanValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpanValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpanValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpanValidationError) ErrorName() string { return "SpanValidationError" }

// Error satisfies the builtin error interface
func (e SpanValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpan.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpanValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpanValidationError{}

// Validate checks the field values on Span_TraceID with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Span_TraceID) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Low

	// no validation rules for High

	return nil
}

// Span_TraceIDValidationError is the validation error returned by
// Span_TraceID.Validate if the designated constraints aren't met.
type Span_TraceIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Span_TraceIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Span_TraceIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Span_TraceIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Span_TraceIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Span_TraceIDValidationError) ErrorName() string { return "Span_TraceIDValidationError" }

// Error satisfies the builtin error interface
func (e Span_TraceIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpan_TraceID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Span_TraceIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Span_TraceIDValidationError{}
